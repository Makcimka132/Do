/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

@if(__RAVE_OS == "LINUX") {
    import <std/sysc> <std/time>

    namespace std {
        namespace process {
            struct rusage {
	            std::timeVal ru_utime;
	            std::timeVal ru_stime;

	            long ru_maxrss;
	            long ru_ixrss;
	            long ru_idrss;
	            long ru_isrss;
	            long ru_minflt;
	            long ru_majflt;
	            long ru_nswap;
	            long ru_inblock;
	            long ru_oublock;
	            long ru_msgsnd;
	            long ru_msgrcv;
	            long ru_nsignals;
	            long ru_nvcsw;
	            long ru_nivcsw;

	            long[16] __reserved;
            }

            alias cloneVM = 0x00000100;
            alias cloneFS = 0x00000200;
            alias cloneFiles = 0x00000400;
            alias cloneSighand = 0x00000800;
            alias clonePigFD = 0x00001000;
            alias clonePtrace = 0x00002000;
            alias cloneVfork = 0x00004000;
            alias cloneParent = 0x00008000;
            alias cloneThread = 0x00010000;
            alias cloneNewNS = 0x00020000;
            alias cloneSysvsem = 0x00040000;
            alias cloneSetTLS = 0x00080000;
            alias cloneParentSetTID = 0x00100000;
            alias cloneChildClearTID = 0x00200000;

            extern(linkname: "environ") char** environment;

            (inline) int isTermSignal(int s) => s && 0x7F;
            (inline) int isNormalExit(int s) => !(std::process::isTermSignal(s));
            (inline) int getExitStatus(int s) => ((s) && 0xFF00) >. 8;

            (inline) int execve(char* fName, char** argv, char** envp) => cast(int)std::syscall(std::sysctable::Execve);
            (inline) int clone(int(void*) fn, void* stack, int flags, void* arg, int* pTID, void* tls, int* cTID) => cast(int)std::syscall(std::sysctable::Clone, fn, stack, flags, arg, pTID, tls, cTID);
            (inline) int fork => cast(int)std::process::clone(cast(int(void*))null, null, 0, null, null, null, null);
            (inline) uint wait4(uint pid, int* status, int options, std::process::rusage* rusage) => cast(int)std::syscall(std::sysctable::Wait4, pid, status, options, rusage);
            (inline) int waitpid(uint pid, int* status, int options) {std::process::rusage ru;} => std::process::wait4(pid, status, options, &ru);

            (inline) int getPID => cast(int)std::syscall(std::sysctable::GetPID);
            (inline) int getPPID => cast(int)std::syscall(std::sysctable::GetPPID);

            (ctargs) int execl {
                char* path = @getCurrArg(char*);

                @skipArg();

                uint count = @argsLength();

                char** argv = cast(char**)std::malloc(count * sizeof(char*));
                if(count > 0) defer std::free(argv);

                @foreachArgs() {
                    argv[@getCurrArgNumber()] = @getCurrArg(char*);
                };

                return = std::process::execve(path, argv, std::process::environment);
            }
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace process {
            extern(linkname: "GetCurrentProcessId") int __GetCurrentProcessId();
            (inline) int getPID => std::process::__GetCurrentProcessId();
        }
    }
}
@else {
    namespace std {
        namespace process {
            extern(linkname: "getpid") int getPID();
        }
    }
};
