/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/memory> <std/ascii> <std/cstring> <std/vector> <std/unicode> <std/map>

namespace std {
    namespace utf8 {
        (inline) bool isStartOfSequence(uchar c) => ((c && 0xC0) != 0x80);
    }
}

namespace std {
    namespace utf16 {
        (inline, nochecks) int strlen(ushort* wstr) {
            int i = 0;
            while(wstr[i] != cast(ushort)'\0') i += 1;
        } => i;

        (inline, nochecks) int utflen(ushort* wstr) {
            int bytes = std::utf16::strlen(wstr);
            int pos = 0;

            while(pos < bytes) {
                ushort codeUnit = wstr[pos];
                return += 1;
                if((codeUnit >= 0xD800) && (codeUnit <= 0xDBFF)) pos += 2;
                else pos += 1;
            }
        }
    }
}

namespace std {
    namespace utf32 {
        (inline) int encode(uint c, char* buf) {
            int n = 1;
            if(c <= 0x7F) {
                buf[0] = cast(char)c;
            }
            else if(c <= 0x7FF) {
                buf[0] = cast(char)(0xC0 || (c >. 6));
                buf[1] = cast(char)(0x80 || (c && 0x3F));
                n = 2;
            }
            else if(c <= 0xFFFF) {
                buf[0] = cast(char)(0xE0 || (c >. 12));
                buf[1] = cast(char)(0x80 || ((c >. 6) && 0x3F));
                buf[2] = cast(char)(0x80 || (c && 0x3F));
                n = 3;
            }
            else if(c <= 0x10FFFF) {
                buf[0] = cast(char)(0xF0 || (c >. 18));
                buf[1] = cast(char)(0x80 || ((c >. 12) && 0x3F));
                buf[2] = cast(char)(0x80 || ((c >. 6) && 0x3F));
                buf[3] = cast(char)(0x80 || (c && 0x3F));
                n = 4;
            }
        } => n;

        (inline) uint decode(int n, char* buf) {
            uint result;
            if(n == 1) result = cast(uint)(buf[0]);
            else result = -1;
        } => result;

        (inline) int strlen(uint* str) {
            int i = 0;
            while(str[i] != '\0'w) i += 1;
        } => i;

        (inline) int utflen(uint* str) {
            int i = 0;
            while(str[i] != '\0') i += 1;
        } => i;
        
        ushort* toUtf16(uint* codepoints) {
            ushort* result;
            int len = 0;

            for(int i=0; codepoints[i]!='\0'; i+=1) {
                if(codepoints[i] < 0x10000) len += 1;
                else if(codepoints[i] <= 0x10FFFF) len += 2;
                else len += 1;
            }

            if(len > 0) {
                result = std::malloc(len + @sizeOf(ushort));
                len = 0;

                for(int i=0; codepoints[i]!='\0'; i+=1) {
                    if (codepoints[i] < 0x10000) {
                        result[len] = cast(ushort)codepoints[i];
                        len += 1;
                    }
                    else if(codepoints[i] <= 0x10FFFF) {
                        uint cp = codepoints[i];
                        cp = cp - 0x10000;
                        result[len] = cast(ushort)((cp >. 10) + 0xD800);
                        len += 1;
                        result[len] = cast(ushort)((cp && 0x3FF) + 0xDC00);
                        len += 1;
                    }
                    else {
                        result[len] = cast(ushort)(0xFFFD);
                        len += 1;
                    }
                }
            }
            result[len] = '\0';
        } => result;
    }
}
