/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/ascii>

namespace std {
    namespace crypto {
        namespace caesar {
            char encryptChar(char c, int key) {
                if(std::ascii::isUpper(c)) return = ((c + key - 'A') % (cast(char)26)) + 'A';
                else if(std::ascii::isLower(c)) return = ((c + key - 'a') % (cast(char)26)) + 'a';
            } => c;

            (inline) char decryptChar(char c, int key) => std::crypto::caesar::encryptChar(c, 26 - key);

            std::string encrypt(std::string s, int key) {
                std::string buffer = "";
                for(int i=0; i<s.length; i+=1) buffer.add(std::crypto::caesar::encryptChar(s.data[i], key));
            } => buffer;

            std::string decrypt(std::string s, int key) {
                std::string buffer = "";
                for(int i=0; i<s.length; i+=1) buffer.add(std::crypto::caesar::decryptChar(s.data[i], key));
            } => buffer;
        }

        namespace atbash {
            char encryptChar(char c) {
                if(std::ascii::isUpper(c)) return = 'Z' - (c - 'A');
                else return = 'z' - (c - 'a');
            }

            std::string encrypt(std::string s) {
                std::string buffer = "";
                for(int i=0; i<s.length; i+=1) buffer.add(std::crypto::atbash::encryptChar(s.data[i]));
            }
        }
    }
}
