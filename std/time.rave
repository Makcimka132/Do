/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/sysc>

namespace std {
    struct timeW {
        int sec;
        int min;
        int hour;
        int mday;
        int month;
        int year;
        int wday;
        int yday;
        int isdst;
        long gmtoff;
        char* zone;
    }

    struct __time {
        long seconds;
        long nseconds;
    }

    struct time {
        long seconds;
        long milliseconds;
        long microseconds;
    }

    alias RealTime = 0;
    alias Monotonic = 1;

    struct timeVal {
        long sec;
        long usec;
    }

    struct timeZone {
        int tz_minuteswest;
        int tz_dsttime;
    }

    struct timeb {
        int time;
        short millitm;
        short timezone;
        short dstflag;
    }
}

@if(__RAVE_OS == "WINDOWS") {
    namespace std {
        struct __systemTime {
            short wYear;
            short wMonth;
            short wDayOfWeek;
            short wDay;
            short wHour;
            short wMinute;
            short wSecond;
            short wMilliseconds;
        }

        struct __fileTime {
            int low;
            int high;
        }

        extern(linkname: "GetSystemTime") void __GetSystemTime(std::__systemTime* tm);
        extern(linkname: "GetTickCount64") ulong __GetTickCount();
        extern(linkname: "GetSystemTimeAsFileTime") void __GetSystemTimeAsFileTime(std::__fileTime* tm);
        extern(linkname: "ProcessPrng") int __ProcessPrng(char* data, int size);

        int getCurrentTime(std::time* tc) {
           std::__fileTime ftm;
           std::__GetSystemTimeAsFileTime(&ftm);

           long li;
           int* liPtr = cast(int*)&li;
           liPtr[0] = ftm.low;
           liPtr[1] = ftm.high;

           tc.seconds = (li / 10000000l) - 11644473600l;
           tc.milliseconds = (li / 10000l) - 11644473600000l;
           tc.microseconds = (li / 10l) - 11644473600000000l;
        } => 0;
    }
}
@else @if(__RAVE_OS == "LINUX") {
    namespace std {
        (inline) int __gettimeofday(std::timeVal* tv) => cast(int)std::syscall(std::sysctable::GetTimeOfDay, tv, null);
        (inline) int __clock_gettime(int flag, std::__time* tc) => cast(int)std::syscall(std::sysctable::ClockGetTime, flag, tc);

        int getCurrentTime(std::time* tc) {
            std::__time ts;
            return = std::__clock_gettime(std::RealTime, &ts);
            tc.seconds = ts.seconds;
            tc.microseconds = ts.nseconds / 1000l;
            tc.milliseconds = tc.microseconds / 1000l;
        }
    }
}
@else {
    namespace libc {
        extern(linkname: "time") long getTime(void* v);
        extern(linkname: "ftime") void getFTime(std::timeb* tm);
    }

    namespace std {
        (inline) int getCurrentTime(std::time* tc) {
            tc.seconds = libc::getTime(null);
            tc.milliseconds = -1l;
            tc.microseconds = -1l;
        } => 0;
    }
}